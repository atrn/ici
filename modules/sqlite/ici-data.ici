/*
 * ICI 'data' module - higher-level data storage
 *
 * The data module provides a number of data-storage concepts and
 * builds upon the sqlite module, which it uses as its underlying
 * storage mechanism.
 *
 * The data module builds upon a (basic) SQL DBMS and provides
 *
 * Classes
 *
 * - Store
 *      A /store/ is a SQLite database, a single file storing zero
 *      or more database /tables/. A program may use as many stores
 *      as it likes however as a convenience the data module supports
 *      a per-program (note /program/ and not /process/) data store.
 *
 * - Table
 *      A /table/ is a SQLite SQL table. A collection of zero or
 *      more /rows/ of some defined structure, the table's /entity/.
 *
 * - Entity
 *      An /entity/ is a collection of /columns/, a table's /schema/.
 *      Each column has a name and a defined data type.
 */

/*
 *  This is a helper function for the Entity class (below) and is
 *  used to verify that a column index array matches an Entity's
 *  prototype map.  The index must contain a single entry for all
 *  keys used in the prototype map.
 */
local check_entity_index(index, prototype) {
    // call(set, array) idiom -> create a set from the contents of an array
    prototype_keys := call(set, keys(prototype));
    if (len(prototype_keys) == 0) {
        return "entity prototype has no keys";
    }
    if (len(index) != len(prototype_keys)) {
        return "entity index and prototype map sizes differ";
    }
    forall (col in index) {
        if (!prototype_keys[col]) {
            return sprintf("%s: key not found in prototype map", col);
        }
    }
}

extern QuerySynthesizer = [class

    new(store)
    {
        this = this:^new();
        this._store := store;
        return this;
    }

    synthesize(method_name, parts, entity)
    {
        fail(sprintf("%s: %s - no corresponding SQL", store:name(), method_name));
    }
];


/*
 *  A data.Entity represents the structure of an SQL table, the
 *  columns.  A data.Entity defines the names, types and order
 *  of the columns in the table.
 *
 *  Entities are created from a _prototype_ object, an ICI map
 *  containing key/value pairs that define the names and types
 *  of the table's columns.  Actual values stored in the map
 *  are NOT used when defining the table structure (but may be
 *  used in other features).
 *
 *  By default columns appear in the table in arbitrary order. To
 *  control ordering an _index_ may be supplied. The index is an array
 *  of the column names, in the order they should appear in the
 *  table. The index must be "complete" and contain an entry for each
 *  key defined by the prototype.
 */
extern Entity = [class

    new(name, prototype, index)
    {
	this = this:^new();
        this._name := name;
        this._prototype := prototype;
	if (index) {
            if (err := check_entity_index(index, prototype)) {
                fail(err);
            }
	    this._index := index;
	} else {
	    this._index := sort(keys(prototype));
	}
	this._types := array();
	forall (col in this._index) {
	    push(this._types, sqlite.type_for(typeof(prototype[col])));
	}
	return this;
    }

    signature()
    {
        sig := sprintf("%s:%s", _index[0], _types[0]);
        for (i := 1; i < len(_index); ++i)
        {
            sig = sprintf("%s|%s:%s", sig, _index[i], _types[i]);
        }
        return sig;
    }

    num_columns()
    {
	return len(_index);
    }

    column(i)
    {
	return _index[i];
    }

    column_type(i)
    {
	return _types[i];
    }

    columns()
    {
        return _index;
    }

    default_table_name()
    {
        return _name;
    }

    create_table_sql(name)
    {
        if (!name) {
            name = _name;
        }
        sql := sprintf("create table if not exists %s (", name);
        sql += _index[0];
        sql += " ";
        sql += _types[0];
        for (i := 1, n := len(_index); i < n; ++i)
        {
            sql += sprintf(", %s %s", _index[i], _types[i]);
        }
        sql += ")";
        return sql;
    }
];


/*
 *  A data.Store represents a database, stored in a SQLite file,
 *  and extends the simpler sqlite.db class.
 *
 *  Query Synthesis
 *
 *  The Store class uses ICI's 'unknown_method' feature to implement,
 *  what I call, "query synthesis". The 'unknown_method' feature calls
 *  a known method, "unknown_method", to handle the error case of a
 *  method being called that is not found.
 *
 *  Query synthesis uses the name of the unknown method to encode
 *  database operations such as inserts, selects and updates.
 *
 *  E.g given a "users" data.Store (table) the method call,
 *
 *      users:get_user(32)
 *
 *  translates to the SQL,
 *
 *      SELECT * FROM users WHERE id = 32
 *
 *  The "users" table name comes from the users data.Store
 *  instance and other parts of the SQL from the method
 *  name and 
 */
extern Store = [class

    standard_extension = ".db",

    filename_for_this_process(path_extension)
    {
        if (!path_extension) {
            path_extension = standard_extension;
        }
        return sub(basename(argv[0]), #\.ici$#, "") + path_extension;
    }

    new(filename, options)
    {
        var options = "c";
        this = this:^new();
        this._filename := filename;
        this._db := sqlite.open(filename, options);
        return this;
    }

    name()
    {
        return basename(_filename);
    }

    create_table_for_entity(ent, name)
    {
        _db:exec(ent:create_table_sql(name));
    }

    exec(sql)
    {
        var vargs = [array];
        return call(_db:exec, array(sql) + vargs);
    }

    changes()
    {
        return _db:changes();
    }

    unknown_method(method_name)
    {
        var vargs = [array];

        parts := split(method_name, "_");

        // <table>_insert(<entity>)
        //
        if (len(vargs) == 1 && len(parts) == 2 && parts[1] == "insert")
        {
            return this:_synthesize_insert(parts[0], vargs[0]);
        }

        // get_<table>(<id>) -> <row>
        //
        if (len(vargs) == 1 && len(parts) == 2 && parts[0] == "get")
        {
            return this:_synthesize_get_by_pk(parts[1], vargs[0]);
        }

        // get_<table>_by_<column>(<value>) -> <rows>
        //
        if (len(vargs) == 1 && len(parts) == 4 && parts[0] == "get" && parts[2] == "by")
        {
            return this:_synthesize_get_by_column(parts[1], parts[3], vargs[0]);
        }

        // get_<table>_by_<column>_like(<value>) -> <rows>
        //
        if (len(vargs) == 1 && len(parts) == 5 && parts[0] == "get" && parts[2] == "by" && parts[4] == "like")
        {
            return this:_synthesize_get_by_column_like(parts[1], parts[3], vargs[0]);
        }

        fail(sprintf("%s: unknown method - '%s' %s\n", _filename, method_name, sprint(vargs)));
    }

    _synthesize_insert(table, entity)
    {
        return _db:exec(sqlite.generate_insert_entity_sql(table, entity));
    }

    _synthesize_get_by_pk(table, val)
    {
        pk := sqlite.primary_key(_db, table);
        rows := _db:exec(sprintf("select * from %s where %s = %s", table, pk, sqlite.as_string(val)));
        switch (len(rows))
        {
        case 0:
            return NULL;
        case 1:
            return rows[0];
        default:
            fail(sprintf("%d rows returned for select by primary-key", len(rows)));
        }
    }

    _synthesize_get_by_column(table, col, val)
    {
        return _db:exec(sprintf("select * from %s where %s = %s", table, col, sqlite.as_string(val)));
    }

    _synthesize_get_by_column_like(table, col, val)
    {
        return _db:exec(sprintf("select * from %s where %s like %s", table, col, sqlite.as_string(val)));
    }

    define_entity(ent)
    {
        _db:exec(ent:create_table_sql());
    }

    store(name, value, mktable)
    {
	var mktable = true;
	if (mktable) {
	    // ensure the table exists, it usually will
	    this:create_table_for_entity(Entity:new(name, value));
	}
        return this:_synthesize_insert(name, value);
    }
];

/*
 * A data.Table represents an individual table help in
 * a data.Store's underlying SQLite database used to
 * store instances of an _entity_ type, defined by a
 * prototype map.
 */
extern Table = [class

    new(store, name, entity)
    {
        this = this:^new();
        this._store := store;
        this._name := name;
        this._entity := entity;
        return this;
    }

    name()
    {
        return _name;
    }

    create_table()
    {
        _store:exec(_entity:create_table_sql());
    }

    signature()
    {
        return sprintf("%s,%s", this:name(), _entity:signature());
    }

    num_columns()
    {
        return _entity:num_columns();
    }

    column(i)
    {
        return _entity:column(i);
    }

    column_type(i)
    {
        return _entity:column_type(i);
    }

    columns()
    {
        return _entity:columns();
    }

    store(entity)
    {
        _store:store(this:name(), entity, false);
    }

];

/*
 *  A Schema represents a collection of related Table instances
 *  with an associated "version" number.
 */
extern Schema = [class

    new()
    {
        this = this:^new();
	this.tables := array();
	this.version := 0;
        return this;
    }
];
