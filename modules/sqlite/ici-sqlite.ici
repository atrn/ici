/*
 *  sqlite module.
 *  Copyright (C) 2019 A.Newman.
 */

/*
 *  Cache of per-table meta-data maps.
 */
local table_meta_data_cache = map();

/*
 *  sqlite.invalidate_cached_table_meta_data(string)
 *
 *  Remove any cached meta-data for the table with the given name.
 *
 */
extern invalidate_cached_table_meta_data(table)
{
    del(table_meta_data_cache, table);
}

/*
 *  map = sqlite.get_table_meta_data(db, string)
 *
 *  Return a map containing information, meta-data, about
 *  the table with the given name, in the given database.
 *
 *  The returned meta-data includes the following keys:
 *
 *  - columns           An array of column definitions, a map
 *                      describing a column in the table.
 *  - column_names      An array of the names of the columns,
 *                      in definition order.
 *  - column_index      A map from column name to column
 *                      definition (map) to permit efficient
 *                      access by column name.
 */
extern get_table_meta_data(db, table)
{
    meta := table_meta_data_cache[table];
    if (!meta)
    {
        rows := db:exec(sprintf("pragma table_info(%s)", table));
        if (len(rows) < 1)
        {
            fail(sprintf("%s: no such table", table));
        }
        names := transform(rows, [func (row) { return row.name; }]);
        meta = map("columns", rows, "column_names", names, "column_index", map());
        forall (col in meta.columns)
        {
            meta.column_index[col.name] = col;
        }
        table_meta_data_cache[table] = meta;
    }
    return meta;
}

/*
 * array = sqlite.get_column_names(db, string)
 *
 *  Return an array containing the names of the columns
 *  in the table with the given name, in the given database.
 */
extern get_column_names(db, table)
{
    return get_table_meta_data(db, table).column_names;
}

/*
 *  Return the SQLite type name of the given column from
 *  the table with the given name in the given database.
 */
extern get_column_type(db, table, column)
{
    sql := sprintf("select type from pragma_table_info('%s') where name = '%s'", table, column);
    return db:exec(sql)[0].type;
}


/*
 * array = sqlite.table_names(db)
 *
 * Return an array containing the names of the (user) tables in the database.
 */
extern table_names(db)
{
    return transform
    (
        db:exec("select tbl_name from sqlite_master where type = 'table' order by tbl_name asc"),
        [func (row) { return row.tbl_name; }]
    );
}

/*
 * string = sqlite.primary_key(db, table)
 *
 * Returns the name of the primary key column in the named table.
 * If the table has no defined primary key the name of the first
 * column is returned.
 */
extern primary_key(db, table)
{
    rows := db:exec(sprintf("pragma table_info(%s)", table));
    if (len(rows) < 1)
    {
        return "";
    }
    forall (col in rows)
    {
        if (col.pk)
        {
            return col.name;
        }
    }
    return rows[0].name;
}

/*
 * string = sqllite.type_for(any)
 *
 * Returns the SQL type used to represent _any_ or raises
 * an error if _any_ has no corresponding SQL type.
 */
extern type_for(any)
{
    switch (t := typeof(any))
    {
    case "float":
        return "real";
    case "int":
        return "integer";
    case "mem":
        return "blob";
    case "string":
        return "text";
    default:
        fail(sprintf("%s: no appropriate SQL type", t));
    }
}

/*
 * string = sqlite.as_string(any)
 *
 * Returns an SQL literal representation of the given value.
 */
extern as_string(any)
{
    switch (typeof(any))
    {
    case "NULL":
        return "NULL";
    case "string":
        return "'" + any + "'";
    default:
        return string(any);
    }
}

/*
 * any = sqlite.run(string, database [, error_handler])
 *
 * Execute the given SQL statements using the supplied database
 * using the supplied error_handler, if any, to handle errors.
 *
 * Note the order of arguments, the string containing the SQL
 * statements is the first argument and the database second.
 * This is unlike other functions that take a database but
 * reads more naturally..."Run. This sql. With this database."
 *
 * If used, error_handler is called with three arguments - the database,
 * the SQL statements and the ICI error string.  If the error function
 * returns NULL (or integer 0) the SQL statement is retried otherwise
 * the call to run returns the result of error_handler as its result.
 *
 * This --topic-- is part of --ici-sqlite-- documentation.
 */
extern run(sql, db, error_handler)
{
    //  The default error handler calls fail() to propogate the error.
    //
    var error_handler = [func (db, stmt, error) { fail(error); }];

    for (;;)
    {
	try
	{
	    return db:exec(sql);
	}
	onerror
	{
	    if (debug())
            {
		printf(stderr, "sqlite: %s\n", error); flush(stderr);
            }
	    if (rc := call(error_handler, array(db, sql, error)))
            {
		return rc;
            }
        }
    }
}


/*
 *  string = sqlite.generate_table_definition_from_prototype(map)
 *
 *  Returns a string containg an SQL "CREATE TABLE" statement that can
 *  be used to create a table that will store entities with a schema
 *  that represents the key/values held the map.
 *
 *  Note that this is only useful for tables storing complete
 *  entities, there is no guarantee as to the ordering of the
 *  columns in the generate table definition.
 */
extern generate_table_definition_from_prototype(entity, name)
{
    sql := "create table " + name + " (";
    sep := "";
    forall (v, k in entity)
    {
       if (typeof(k) == "string")
       {
           sql += sprintf("%s%s %s", sep, k, type_for(v));
           sep = ", ";
       }
    }
    sql += ")";
    return sql;
}

/*
 *  string = sqlite.generate_insert_entity_sql
 *
 *  Given an "entity", a map with at least one
 *  key/value, this function returns a string
 *  containing the SQL statement to insert that
 *  entity into the table with the given name.
 */
extern generate_insert_entity_sql(table, entity)
{
    cols := keys(entity);
    if (len(cols) < 1)
    {
        fail(sprintf("%s: entity has no keys", typeof(entity)));
    }
    sql := "insert into " + table + " (" + cols[0];
    forall (col in slice(cols, 1))
    {
        sql += ", " + col;
    }
    sql = sql + ") values (" + as_string(entity[cols[0]]);
    forall (col in slice(cols, 1))
    {
        sql += ", " + as_string(entity[col]);
    }
    sql += ")";
    return sql;
}
