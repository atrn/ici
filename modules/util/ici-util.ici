/*
 *  float = util.measure_elapsed_time(callable[, args...])
 */
extern measure_elapsed_time(fn)
{
    var vargs = [array];
    start := now();
    call(fn, vargs);
    return now() - start;
}

/*
 * util.log_elapsed_time(callable [, args...])
 * util.log_elapsed_time(string, callable [, args...])
 */
extern log_elapsed_time(fn)
{
    var vargs = [array];
    var caption;

    switch (t := typeof(fn))
    {
    case "func":
        if ((caption = fn.name) == "")
            caption = "[func]";
        break;

    case "string":
        if (len(vargs) < 1)
            argcount("log_elapsed_time", 2, 1);
        caption = fn;
        fn = vargs[0];
        vargs = slice(vargs, 1);
        if (typeof(fn) != "func")
            argerror("log_elapsed_time", 2, typeof(fn));
        break;

    default:
        argerror("log_elapsed_time", 1, t);
    }

    failed := NULL;
    start := now();
    try
    {
        result := call(fn, vargs);
    }
    onerror
    {
        failed = error;
    }
    elapsed := now() - start;
    if (failed)
    {
        printf(stderr, "%s failed -> %s (%s)\n", caption, failed, format_time(elapsed));
	flush(stderr);
	fail(failed);
    }
    printf(stderr, "%s %s\n", caption, format_time(elapsed));
    flush(stderr);
    return result;
}
