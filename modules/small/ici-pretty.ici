/*
 * string = pretty.sprint(any)
 */

local SPACING = 4;

local printable(str)
{
    r := array();
    forall (ch in str)
    {
        if (ch >= " " && ch <= "~")
            push(r, ch);
        else
        {
            switch (ch)
            {
            case "\a":      push(r, "\\a"); break;
            case "\b":      push(r, "\\b"); break;
            case "\n":      push(r, "\\n"); break;
            case "\r":      push(r, "\\r"); break;
            case "\t":      push(r, "\\t"); break;
            default:        push(r, sprintf("\\x%02x", toint(ch)));
            }
        }
    }
    return implode(r);
}
           
local sprint_map(any, indent, indent2, unquoted)
{
    //
    //THIS IS BROKEN - LOOPS FOREVER, super(x) IS NEVER NULL!
    //if (super(any))
    //{
    //    if (debug()) printf(stderr, "DEBUG: super [%s]\n", typeof(super(any)));
    //    s = sprintf("%s%s", s, sprint(super(any), indent2));
    //}
    //
//    keys_types := array();
//    forall (k in sort(keys(any)))
//    {
//        push(keys_types, map("key", k, "type", typeof(any[k])));
//    }
//printf(stderr, "DEBUG:got keys\n");
//    order := sort
//    (
//        keys_types,
//        [func (a, b) {
//        // if (a.type != b.type) return cmp(a.type, b.type);
//            return cmp(a.key, b.key);
//        }]
//    );

    order := sort(keys(any));
    s := sprintf("%*s[map\n", (indent*SPACING), "");
    forall (k in order)
    {
        s = sprintf("%s%s = %s,\n", s, sprint(k, indent2, indent2+1, true), sprint(any[k], 0, indent2+1));
    }
    return sprintf("%s%*s]", s, ((indent2-1)*SPACING), "");
}

extern sprint(any, indent, indent2, unquoted)
{
    if (!indent) indent = 0;
    if (!indent2) indent2 = indent+1;

    switch (t := typeof(any))
    {
    case "NULL":
        return sprintf("%*sNULL", (indent*SPACING), "");
    case "int":
        return sprintf("%*s%d", (indent*SPACING), "", any);
    case "float":
        return sprintf("%*s%g", (indent*SPACING), "", any);
    case "string":
        return sprintf("%*s%s", (indent*SPACING), "", unquoted ? any : sprintf("\"%s\"", printable(any)));
    case "regexp":
        return sprintf("%*s#%s#", (indent*SPACING), "", string(any));
    case "array":
    case "set":
        s := sprintf("%*s[%s\n", (indent*SPACING), "", t);
        forall (v, k in any)
        {
            s = sprintf("%s%s,\n", s, sprint(v, indent2));
        }
        s = sprintf("%s%*s]", s, ((indent2-1)*SPACING), "");
        return s;
    case "map":
        return sprint_map(any, indent, indent2, unquoted);
    default:
        return sprintf("%*s[%s]", (indent*SPACING), "", t);
    }
}

/*
 *  pretty.print(any [, file])
 */

extern print(any, file)
{
    puts(sprint(any), file ? file : stdout);
}

/*
 * Return a "pretty size".
 *
 * The prec argument controls the precision of the sizes in
 * in the resultant string. If not specified a suitable number
 * of digits are used for the magnitude of the size.
 */
extern size(z, prec)
{
    var prec = -1;

    local K = 1024.0;
    local M = 1024*K;
    local G = 1024*M;
    local T = 1024*G;

    if (z >= T)
    {
        if (prec == -1) prec = 2;
        return sprintf("%.*fT", prec, z/T);
    }
    if (z >= G)
    {
        if (prec == -1) prec = 2;
        return sprintf("%.*fG", prec, z/G);
    }
    if (z >= M)
    {
        if (prec == -1) prec = 1;
        return sprintf("%.*fM", prec, z/M);
    }
    if (z >= K)
    {
        if (prec == -1) prec = 1;
        return sprintf("%.*fK", prec, z/K);
    }
    if (prec == -1) prec = 0;
    return sprintf("%.*f", prec, int(z));
}
