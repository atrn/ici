/*
 * string = sprint(any)
 */
extern sprint() {
    var varg = [array];
    var result = "";
    var o;
    var v;
    var k;
    var term = "";
    var sdelim = "";
    var raw = false;
    var supers = [set];

    switch (len(vargs)) {
    case 1:
	o = vargs[0];
	break;

    case 2:
	o = vargs[0];
        term = vargs[1];
	sdelim = "\"";
	break;

    case 3:
	o = vargs[0];
	term = vargs[1];
	sdelim = "\"";
        supers = vargs[2];
	break;

    default:
	fail(sprintf("incorrect number of parameters to sprint(), expected 1, 2, or 3 args (got %d)", len(vargs)));
    }

    switch (t := typeof(o)) {
    case "array":
    case "set":
	result += sprintf("[%s", t);
	forall (v in o) {
	    result += " ";
	    result += sprint(v, "");
	    result += ",";
	}
	result += sprintf("]%s", term);
	break;

    case "map":
	result += "[map";
	if (ss := super(o)) {
            if (supers[ss]) {
		result += ": [map]";
	    } else {
                assign(supers, ss);
                result += ": ";
                result += sprint(super(o), "", supers);
            }
	}
	forall (v, k in o) {
	    if (typeof(k) == "string" && k ~ #^[_a-zA-Z][_a-zA-Z0-9]*$#) {
		result += sprintf(" %s", k);
            } else {
		result += " (";
		result += sprint(k, "");
		result += ")";
	    }
	    result += " = ";
	    if (typeof(v) == "map") {
		if (supers[v]) {
		    result += "[map]";
		} else {
		    assign(supers, v);
		    result += sprint(v, "");
		}
	    } else {
		result += sprint(v, "");
	    }
	    result += ",";
	}
	result += sprintf("]%s", term);
	break;

    case "string":
	cleanse := [func (s) {
	    r := array();
	    forall (c in s) {
		if (c >= " " && c <= "~") {
		    push(r, c);
		} else {
		    switch (c) {
		    case "\a": push(r, "\\a"); break;
		    case "\b": push(r, "\\b"); break;
		    case "\f": push(r, "\\f"); break;
		    case "\n": push(r, "\\n"); break;
		    case "\r": push(r, "\\r"); break;
		    case "\t": push(r, "\\t"); break;
		    default: push(r, sprintf("\\%03o", toint(c)));
		    }
                }
	    }
	    return implode(r);
	}];
	if (raw) {
	    result += sprintf("%s", o);
        } else {
	    result += sprintf("%s%s%s%s", sdelim, cleanse(o), sdelim, term);
        }
	break;

    default:
	result += sprintf("%s%s", string(o), term);
	break;
    }
    return result;
}

/*
 * print([file,] [any])
 *
 * Output a textual representation of an object to a file.
 *
 */
extern print() {
    var vargs;
    var stream;
    var o;
    var v;
    var k;
    var term = "";
    var sdelim = "";
    var raw = false;
    var supers = [set];

    if (vargs == NULL) {
	stream = stdout;
	o = "\n";
	raw = true;
    } else {
	switch (len(vargs)) {
	case 1:
	    stream = stdout;
	    o = vargs[0];
	    break;

	case 2:
	    stream = vargs[0];
	    o = vargs[1];
	    break;

	case 3:
	    stream = vargs[0];
	    o = vargs[1];
	    term = vargs[2];
	    sdelim = "\"";
	    break;

        case 4:
	    stream = vargs[0];
	    o = vargs[1];
	    term = vargs[2];
	    sdelim = "\"";
            supers = vargs[3];
            break;

	default:
	    fail("incorrect number of parameters to print()");
	}
    }

    switch (t := typeof(o)) {
    case "array":
    case "set":
	printf(stream, "[%s", t);
	forall (v in o) {
	    printf(stream, " ");
	    print(stream, v, "");
	    printf(stream, ",");
	}
	printf(stream, "]%s", term);
	break;

    case "map":
	printf(stream, "[map");
	if (ss := super(o)) {
            if (supers[ss]) {
		printf(stream, ": [map]");
	    } else {
                assign(supers, ss);
                printf(stream, ": ");
                print(stream, super(o), "", supers);
            }
	}
	forall (v, k in o) {
	    if (typeof(k) == "string" && k ~ #^[_a-zA-Z][_a-zA-Z0-9]*$#) {
		printf(stream, " %s", k);
            } else {
		printf(stream, " (");
		print(stream, k, "");
		printf(stream, ")");
	    }
	    printf(stream, " = ");
	    if (typeof(v) == "map") {
		if (supers[v]) {
		    printf(stream, "[map]");
		} else {
		    assign(supers, v);
		    print(stream, v, "");
		}
	    } else {
		print(stream, v, "");
	    }
	    printf(stream, ",");
	}
	printf(stream, "]%s", term);
	break;

    case "string":
	cleanse := [func (s) {
	    r := array();
	    forall (c in s) {
		if (c >= " " && c <= "~") {
		    push(r, c);
		} else {
		    switch (c) {
		    case "\a": push(r, "\\a"); break;
		    case "\b": push(r, "\\b"); break;
		    case "\f": push(r, "\\f"); break;
		    case "\n": push(r, "\\n"); break;
		    case "\r": push(r, "\\r"); break;
		    case "\t": push(r, "\\t"); break;
		    default: push(r, sprintf("\\%03o", toint(c)));
		    }
                }
	    }
	    return implode(r);
	}];
	if (raw) {
	    printf(stderr, "%s", o);
        } else {
	    printf(stream, "%s%s%s%s", sdelim, cleanse(o), sdelim, term);
        }
	break;

    default:
	printf(stream, "%s%s", string(o), term);
	break;
    }
}

extern println() {
    var vargs = [array];
    stream := stdout;
    if (len(vargs) > 0 && typeof(vargs[0]) == "file") {
	stream = vargs[0];
    }
    call(print, vargs);
    printf(stream, "\n");
}
