src_dir := ".";
dst_dir := ".";

incs := [array
    argv[1],
    "fwd.h",
    "types.h",
    "type.h",
    "object.h",
    "null.h",
    "alloc.h",
    "buf.h",
    "debugger.h",
    "catcher.h",
    "channel.h",
    "array.h",
    "int.h",
    "cfunc.h",
    "float.h",
    "vec.h",
    "exec.h",
    "ftype.h",
    "file.h",
    "forall.h",
    "func.h",
    "handle.h",
    "mark.h",
    "mem.h",
    "method.h",
    "error.h",
    "op.h",
    "parse.h",
    "pc.h",
    "profile.h",
    "ptr.h",
    "re.h",
    "ref.h",
    "archiver.h",
    "set.h",
    "src.h",
    "str.h",
    "map.h",
    "wrap.h",
];

icih := array
(
    "/* -*- mode:c++ -*- \n *\n"
    " * ici.h - ici exports for C++ interfacing.\n"
    " *\n"
    " * This file is automatically generated from internal ICI include files.\n"
    " * It is platform specific. ",
        sprintf("This file is based on \"%s\".\n", argv[1]),
    " */\n"
    "\n"
    "#ifndef ICI_H\n"
    "#define ICI_H\n"
    "\n"
);

if (argc > 2)
    src_dir = argv[2];
if (argc > 3)
    dst_dir = argv[3];

forall (i in incs)
{
    t = getfile(f = fopen(pathjoin(src_dir, i)));
    close(f);
    bits = smash(t, #(?s)--ici.h-start--.*?\*/(.*?)(/\*[^/]*--ici.h-end--[^/]*\*/)#, "\\1");
    if (len(bits) > 0)
    {
        needhdr = true;
        forall (b in bits)
        {
            if (b ~ #^[ 	]*$#)
            {
                continue;
            }
            if (b !~ #^ \* This --#)
            {
                if (needhdr)
                {
                    push(icih, sprintf("\n/* From %s */\n", i));
                    needhdr = false;
                }
                push(icih, b);
            }
        }
    }
}

push(icih, "\n} // namespace ici\n"); // fwd.h supplies the namespace start
push(icih, "\n#endif /* ICI_ICI_H */\n");

puts(implode(icih), fopen(pathjoin(dst_dir, "ici.h"), "w"));
