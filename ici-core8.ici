//  The closure() function returns an object that "binds" some number of
//  arguments to a function so that calling the returned object calls
//  that function with the "bound" arguments.
//
//  Any extra arguments passed in the call are passed as additional
//  arguments to the bound function.  I.e. partial closures may be
//  _filled_ in with the remaining, positional, arguments.
//
extern closure(f) {
    var binding = [class
        new(f) {
            var vargs = @[array];
            this = this:^new();
            this.f := f;
            this.args := vargs;
            return this;
        }

        invocation() {
            var vargs = @[array];
            return call(this.f, this.args + vargs);
        }
    ];
    var vargs = @[array];
    bound := call(binding:new, f, vargs);
    return bound:invocation;
}
