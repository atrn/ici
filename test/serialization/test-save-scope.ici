local deepcopy_of(o, copied, depth) {
    var v, k, r;
    switch (typeof(o)) {
    case "map":
        if (copied[o]) {
            return NULL;
	}
	assign(copied, o);
        r := map();
	if (super(o)) {
	    super(r, deepcopy_of(super(o), copied, depth + 1));
	}
        forall (v, k in o) {
            r[deepcopy_of(k, copied, depth + 1)] := deepcopy_of(v, copied, depth + 1);
	}
        return r;

    case "set":
        r := set();
        forall (v, k in o) {
            r[deepcopy_of(k, copied, depth + 1)] := 1;
	}
        return r;

    case "array":
        r := array();
        forall (v in o) {
            push(r, deepcopy_of(v, copied, depth + 1));
	}
        return r;

    default:
	return copy(o);
    }
}

local sans_files(s) {
    if (s) {
        sans_files(super(s));
	forall (v, k in s) {
	    if (typeof(v) == "file") {
		del(s, k);
	    }
	}
    }
    return s;
}

externs := super(super(scope()));
s := sans_files(deepcopy_of(externs, set(), 0));
file = fopen(test.data_file(), "w");
save(s, file);
close(file);
